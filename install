#!/usr/local/bin/zsh

set -e

# Install/update script
echo -n -e "\033]0;Install & update dotfiles for macOS\007"

# Quit a specific set of applications
killallapps() {
  osascript -e 'tell application "System Preferences" to quit'

  # TODO: Only kill these when function param present!
  # "terminal"
  # "iTerm2"

  for app in "Activity Monitor" \
    "AppCleaner" \
    "cfprefsd" \
    "Dock" \
    "Finder" \
    "Google Chrome" \
    "Monolingual" \
    "Safari" \
    "SystemUIServer" \
    "Transmission"; do
      sudo killall -9 "${app}" &> /dev/null || echo "$app not running for user $USER"
  done
}

# Navigate to home directory
cd ~

# Ask for the administrator password upfront
sudo -v -B -p "Password for unattended install: "

# Keep sudo session alive until we're done
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Validate yourself and as admin
[ "$USER" = "root" ] && abort "Run this script as yourself, not as root."
groups | grep -q $Q -E "\b(admin)\b" || abort "Add $USER to the admin group."

# Prevent sleeping during script execution, as long as the machine is on AC power
caffeinate -s -w $$ &

# Set some variables to use during install
# TODO: OR commandline argument override - install/reset = run all update/upgrade not
export LOCKSCREEN_MESSAGE=$(defaults read /Library/Preferences/com.apple.loginwindow LoginwindowText)
export COMPUTERNAME=$(scutil --get ComputerName)

if test "${LOCKSCREEN_MESSAGE#*Deze computer gevonden?}" = "$LOCKSCREEN_MESSAGE"
then
  vared -p "Phonenumber for lock screen message: " -c PHONENUMBER
  export PHONENUMBER=$PHONENUMBER
fi

if test "${COMPUTERNAME#*MacBook Pro}" != "$COMPUTERNAME"
then
  vared -p "Computer network name: " -c PCNAME
  export PCNAME=$PCNAME
fi

killallapps

# Warning: Idle sleep timings for "AC Power" may not behave as expected.
# - Display sleep should have a lower timeout than system sleep.

# Set energy options for unattended install
# These are re-configured in .macos after install
# Sleep the display after 2 hours
# TODO: configure properly
sudo pmset -a displaysleep 120

# Disable machine sleep while charging
sudo pmset -c sleep 0

# Set machine sleep to 3 hours on battery
sudo pmset -b sleep 180

# Set standby delay to 24 hours
sudo pmset -a standbydelay 86400

# Check for macOS updates
if [[ " $@ " != " bw bw bw  " ]]; then
  sudo softwareupdate -i -a -R --agree-to-license
fi

# Make sure we run in zsh, on new macOS this should be the default
chsh -s /bin/zsh

# Restart shell
exec zsh -l

# Install/update Homebrew
HOMEBREW_NO_ANALYTICS=1
HOMEBREW_BUNDLE_NO_LOCK=1
HOMEBREW_CLEANUP_MAX_AGE_DAYS=0
HOMEBREW_NO_ENV_HINTS=1

if ! brew -v 2>/dev/null; then
  echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
  echo "Homebrew already installed. Updating..."
fi

# Disable brew analytics
brew analytics off

# Update brew to latest available version
brew update --quiet && brew upgrade --quiet && brew cleanup --quiet

DF_BRANCH="macos"

# Download Brewfile if not exists
if [ ! -d "~/Brewfile" ]; then
  curl -o Brewfile -fsSL https://raw.githubusercontent.com/$REPO/$DF_BRANCH/Brewfile
fi

# Install Homebrew packages
brew bundle --quiet --no-lock || true

UPDATE_STARTED=$(brew autoupdate status)

if [[ $UPDATE_STARTED != *"installed"* ]]; then
  brew autoupdate start --upgrade --cleanup --enable-notification
fi

brew cu -a -y -q
brew cleanup --prune=all
brew bundle cleanup --quiet --no-lock --force
sudo rm -rf "$(brew --cache)"

# Install dotfiles
if [ ! -d "~/.files" ]; then
  git clone --bare "https://github.com/$REPO.git" ~/.files

  # Reset the unstaged changes before updating
  git --git-dir=~/.files --work-tree=~ reset --hard

  # Set flag to ignore untracked files
  git --git-dir=~/.files --work-tree=~ config --local status.showUntrackedFiles no
fi

git --git-dir=~/.files --work-tree=~ checkout $DF_BRANCH
git --git-dir=~/.files --work-tree=~ pull origin $DF_BRANCH

# Change default shell to Homebrew installed Zsh
BREW_ZSH_LOCATION="$(brew --prefix)/bin/zsh"

if ! fgrep -q $BREW_ZSH_LOCATION /etc/shells; then
  echo $BREW_ZSH_LOCATION | sudo tee -a /etc/shells
  sudo chsh -s $BREW_ZSH_LOCATION $USER
  exec zsh -l
fi

# configure macOS and Applications
# killallapps TODO: is this needed here???
./.macos

touch .hushlogin

# TODO: make sure nvm runs, so that after reboot mackup restore can be run

# Do not reboot
if [[ " $@ " =~ " --no-reboot " ]]; then

  # killallapps

  echo "Done."
  exit
fi

# Reboot
echo "Done. Scheduling reboot!"
sudo shutdown -r +1
