#!/bin/bash

set -e

if [[ -t 1 ]]
then
  tty_escape() { printf "\033[%sm" "$1"; }
else
  tty_escape() { :; }
fi

tty_mkbold() { tty_escape "1;$1"; }

tty_underline="$(tty_escape "4;39")"
tty_blue="$(tty_mkbold 34)"
tty_green="$(tty_mkbold 32)"
tty_red="$(tty_mkbold 31)"
tty_bold="$(tty_mkbold 39)"
tty_reset="$(tty_escape 0)"

shell_join() {
  local arg
  printf "%s" "$1"
  shift
  for arg in "$@"
  do
    printf " "
    printf "%s" "${arg// /\ }"
  done
}

chomp() {
  printf "%s" "${1/"$'\n'"/}"
}

ohai() {
  printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"
}

success() {
  printf "${tty_green}==> %s${tty_reset} ðŸŽ‰\n" "$(shell_join "$@")"
}

warn() {
  printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")"
}

ohai "This script will install dotfiles in ${HOME}"

# Navigate to home directory
cd $HOME

ohai "To do so, please input your"
# Ask for the administrator password upfront
sudo -v -B -p "Password: "

# Keep sudo session alive until we're done
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Set some variables to use during install
NONINTERACTIVE=1
HOMEBREW_NO_ANALYTICS=1
HOMEBREW_BUNDLE_NO_LOCK=1
HOMEBREW_CLEANUP_MAX_AGE_DAYS=0
HOMEBREW_NO_ENV_HINTS=1

if [[ -z "$NAMESERVER" ]]; then
  ohai "Set nameserver to 1.1.1.1 (CloudFlare)"
  NAMESERVER="1.1.1.1"
fi

if [[ -z "$REPO" ]]; then
  REPO="jasperv/dotfiles"
fi

DF_BRANCH="wsl-ubuntu"

# Force WSL to use a specific nameserver
# And not reset it on reboot
if [[ $(lsattr /etc/resolv.conf | awk '$1 !~ "i"') ]]; then
  ohai "do remove resolve.conf"
  sudo rm -f /etc/resolv.conf

  echo "nameserver $NAMESERVER" | sudo tee /etc/resolv.conf > /dev/null

  echo "[network]" | sudo tee /etc/wsl.conf > /dev/null
  echo "generateResolvConf = false" | sudo tee -a /etc/wsl.conf > /dev/null

  ohai "set attr +i on resolve.conf"
  sudo chattr +i /etc/resolv.conf
fi

# Update and upgrade
sudo apt-get update -y && sudo apt-get upgrade -y

# Install Homebrew
if ! brew -v 2>/dev/null; then
  ohai "Install Homebrew"

  echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  (echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/jasper/.zshenv
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  sudo apt-get install build-essential

  brew install gcc
fi

# Disable brew analytics
brew analytics off

# Update brew to latest available version
ohai "Update Homebrew"
brew update --quiet && brew upgrade --quiet && brew cleanup --quiet

# Download Brewfile if not exists
if [ ! -f "$HOME/Brewfile" ]; then
  ohai "Downloading Brewfile"
  curl -o Brewfile -fsSL https://raw.githubusercontent.com/$REPO/$DF_BRANCH/Brewfile
fi

# Install Homebrew packages
ohai "Install Homebrew packages"
brew bundle --quiet --no-lock || true

# Cleanup after brew
ohai "Cleanup after Homebrew"
brew cu -a -y -q
brew cleanup --prune=all
brew bundle cleanup --quiet --no-lock --force
sudo rm -rf "$(brew --cache)"

# Install dotfiles
if [ ! -d "$HOME/.files" ]; then
  ohai "Clone $REPO into $HOME/.files"

  git clone --bare "https://github.com/$REPO.git" "$HOME/.files"

  # Reset the unstaged changes before updating
  git --git-dir=$HOME/.files --work-tree=$HOME reset --hard

  # Set flag to ignore untracked files
  git --git-dir=$HOME/.files --work-tree=$HOME config --local status.showUntrackedFiles no
fi

if [[ `git --git-dir=$HOME/.files --work-tree=$HOME status --porcelain` ]]; then
  warn "local changes to dotfiles found, not updating from origin"
else
  git --git-dir=$HOME/.files --work-tree=$HOME checkout $DF_BRANCH
  git --git-dir=$HOME/.files --work-tree=$HOME pull origin $DF_BRANCH
fi

# Change default shell to Homebrew installed Zsh
BREW_ZSH_LOCATION="$(brew --prefix)/bin/zsh"

if ! fgrep -q $BREW_ZSH_LOCATION /etc/shells; then
  ohai "Use Homebrew installed ZSH"

  echo $BREW_ZSH_LOCATION | sudo tee -a /etc/shells

  sudo chsh -s $BREW_ZSH_LOCATION $USER

  # TODO: reboot/reload for brew to work
fi

# TODO: Configure Ubuntu and Applications

# Silence the default terminal welcome message
touch .hushlogin

mkdir -p src

success "âœ”  Done!"
